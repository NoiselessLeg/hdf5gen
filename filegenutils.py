#!/usr/bin/env python
'''
MIT License

Copyright (c) 2022 Johnathon Lewis

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
import os

class Indentation(object):
    def __init__(self, default_indentation="", indentation_spaces=4):
        self._idt = default_indentation
        self._num_spaces = indentation_spaces
    
    def __str__(self):
        return self._idt
    
    def __add__(self, other):
        return self._idt + other

    def __radd__(self, other):
        return other + self._idt

    def increment(self):
        for i in range(0, self._num_spaces):
            self._idt += " "

    def decrement(self):
        self._idt = self._idt[:-self._num_spaces]

def build_include_list(parsed_file, file_excluder):
    include_filelist = []
    
    for file in parsed_file.other_includes:
        if not file_excluder.is_excluded_path(file.absolute_filepath):
            fixed_filename = file.include_filename.replace(".h", "_H5DataType.h")
            if fixed_filename.startswith('./'):
                fixed_filename = fixed_filename[2:]
            include_filelist.append(fixed_filename)
        
        
    include_filelist.append(os.path.basename(parsed_file.parsed_filepath))
    return include_filelist

def build_namespace_list(type_fqn):
    nslist = []
    if '::' in type_fqn:
        # we purposely do not want to include the type name itself in our "namespace" list
        nslist = type_fqn.split('::')[:-1]
    
    return nslist


def build_output_filepath(output_directory, parsed_filepath_no_dir, desired_output_ext, input_file_ext="h"):
    output_filename = parsed_filepath_no_dir.replace(".{0}".format(input_file_ext), "_H5DataType.{0}".format(desired_output_ext))
    return os.path.join(output_directory, output_filename)

def write_preamble(writefile, parsed_filename_no_dir):
    writefile.write("//////////////////////////////////////////////////////////////////////////////////////\n")
    writefile.write("// Auto-generated by the DxTransform tool.\n")
    writefile.write("// Do not hand-edit this file; modify {0} and re-run the\n".format(parsed_filename_no_dir))
    writefile.write("// DxTransform tool to re-generate the file.\n")
    writefile.write("//////////////////////////////////////////////////////////////////////////////////////\n")